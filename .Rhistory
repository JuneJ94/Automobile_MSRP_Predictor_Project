#normality test
print(shapiro.test(model$residuals[0:5000]))
#multicollinearity
vif_vals = vif(model)
print("Max VIF Value:")
print(max(vif_vals))
print(vif_vals[vif_vals > 5])
#Constant Variance
plot_func(model)
hist(model$resid)
print(bptest(model))
}
assumption_tester(msrp_mod)
assumption_tester = function(model) {
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
#normality test
print(shapiro.test(model$residuals[0:5000]))
#multicollinearity
vif_vals = vif(model)
print("Max VIF Value:")
print(max(vif_vals))
print(vif_vals[vif_vals > 10])
#Constant Variance
plot_func(model)
hist(model$resid)
print(bptest(model))
}
assumption_tester(msrp_mod)
set.seed(100)
#train-test  split using 65% of the data
samplesize = round(0.65*nrow(car_data_factored), 0)
index = sample(seq_len(nrow(car_data_factored)), size = samplesize)
data_train = car_data_factored[index,]
data_test = car_data_factored[-index,]
msrp_mod = lm(MSRP ~. - Popularity, data_train)
summary(msrp_mod)
msrp_mod2 = lm(MSRP ~ highway.MPG + Popularity, data_test)
#summary(msrp_mod2)
#anova(msrp_mod2, msrp_mod)
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl)
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl)[vif(msrp_mod_no_cyl) > 10]
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl)[vif(msrp_mod_no_cyl) > 8
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl)[vif(msrp_mod_no_cyl) > 8]
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl)[vif(msrp_mod_no_cyl) > 7]
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl)[vif(msrp_mod_no_cyl) > 10]
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl_highmpg)[vif(msrp_mod_no_cyl_highmpg) > 10]
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl_highmpg)[vif(msrp_mod_no_cyl_highmpg) > 5]
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data_train)
vif(msrp_mod_no_cyl_highmpg)[vif(msrp_mod_no_cyl_highmpg) > 5]
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data_train)
vif(msrp_mod_no_cyl_highmpg)[vif(msrp_mod_no_cyl_highmpg)]
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data_train)
vif(msrp_mod_no_cyl_highmpg)
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data_train)
vif(msrp_mod_no_cyl_highmpg) > 5
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data_train)
vif(msrp_mod_no_cyl_highmpg)[vif(msrp_mod_no_cyl_highmpg) > 5]
assumption_tester = function(model) {
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
#normality test
print(shapiro.test(model$residuals[0:5000]))
hist(model$resid)
#multicollinearity
vif_vals = vif(model)
print("Max VIF Value:")
print(max(vif_vals))
print(vif_vals[vif_vals > 10])
#Constant Variance
plot_func(model)
print(bptest(model))
}
assumption_tester(msrp_mod)
assumption_tester = function(model) {
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
#normality test
print("Shapiro test:")
print(shapiro.test(model$residuals[0:5000]))
hist(model$resid)
#multicollinearity
vif_vals = vif(model)
print("Max VIF Value:")
print(max(vif_vals))
print(vif_vals[vif_vals > 10])
#Constant Variance
plot_func(model)
print("Breusch-Pagan test:")
print(bptest(model))
}
assumption_tester(msrp_mod)
assumption_tester(msrp_mod_no_cyl_highmpg)
assumption_tester = function(model) {
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
#normality test
print("Shapiro test:")
print(shapiro.test(model$residuals[0:5000]))
hist(model$resid)
#multicollinearity
vif_vals = vif(model)
print("Max VIF Value:")
print(max(vif_vals))
print(vif_vals[vif_vals > 10])
#Constant Variance
plot_func(model)
print("Breusch-Pagan test:")
print(bptest(model))
print("Adjusted R-Squared:")
print(summary(model)$r.sq)
}
assumption_tester(msrp_mod)
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl)[vif(msrp_mod_no_cyl) > 10]
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data_train)
vif(msrp_mod_no_cyl_highmpg)[vif(msrp_mod_no_cyl_highmpg) > 5]
assumption_tester(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train, subset = msrp_mod_no_cyl_highmpg <= 4 / length(msrp_mod_no_cyl_highmpg))
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train, subset = msrp_mod_no_cyl_highmpg <= 4/ length(msrp_mod_no_cyl_highmpg))
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train, subset = msrp_mod_no_cyl_highmpg <= 4/length(msrp_mod_no_cyl_highmpg))
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg <= 4/length(msrp_mod_no_cyl_highmpg))
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
summary(msrp_mod_influential_fix)$r.sq
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 5/length(msrp_mod_no_cyl_highmpg_cd))
summary(msrp_mod_influential_fix)$r.sq
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 10/length(msrp_mod_no_cyl_highmpg_cd))
summary(msrp_mod_influential_fix)$r.sq
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 3/length(msrp_mod_no_cyl_highmpg_cd))
summary(msrp_mod_influential_fix)$r.sq
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <=1/length(msrp_mod_no_cyl_highmpg_cd))
summary(msrp_mod_influential_fix)$r.sq
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
summary(msrp_mod_influential_fix)$adj.r.sq
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_influential_fix)
#install.packages("mltools")
#install.packages("caret")
#install.packages("dplyr")
#install.packages("ggplots2")
library(mltools)
library(data.table)
library(knitr)
library(dplyr)
library(ggplot2)
library(caret)
library(faraway)
library(lmtest)
library(MASS)
boxcox(msrp_mod_influential_fix, plotit = TRUE)
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.5, 1.5, by = 0.1))
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.5, 1.5, by = 1))
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.5, 1.5, by = 0.01))
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.1, 1.5, by = 0.01))
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.1, 0.3, by = 0.01))
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.1, 0.3))
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.1, 0.3, by = 0.1))
boxcox(msrp_mod_influential_fix, plotit = TRUE)
msrp_mod_cox = lm((((MSRP ^ -0.2) - 1) / -0.2) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
boxcox(msrp_mod_influential_fix, plotit = TRUE)
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.1, 0.3, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox, , lambda = seq(0.1, 0.3, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox, , lambda = seq(-0.1, 0.1, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox, , lambda = seq(-1, 2, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ -0.1) - 1) / 0.1) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ -0.1) - 1) / -0.1) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ -0.1) - .1) / -0.1) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ -0.1) - 1) / -0.1) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 0.1) - 1) / 0.1) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 0.5) - 1) / 0.5) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 0.9) - 1) / 0.9) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 1.3) - 1) / 1.3) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 1) - 1) / 1) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 20) - 1) / 20) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 20) - 1) / 20) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox, plotit = TRUE)
msrp_mod_cox = lm((((MSRP ^ 20) - 1) / 20) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox, plotit = TRUE, lambda = seq(0.1, 0.3, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ 20) - 1) / 20) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox, plotit = TRUE, lambda = seq(-.1, 0.3, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ 0) - 1) / 0) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_cox = lm((((MSRP ^ 0.1) - 1) / 0.1) ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox, plotit = TRUE, lambda = seq(-.1, 0.3, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
boxcox(msrp_mod_cox, plotit = TRUE, lambda = seq(-.1, 0.3, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train))
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train)
assumption_tester(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_cox)
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.1, 0.3, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ 0.3) - 1) / 0.3) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 01) - 1) / 01) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ 0.1) - 1) / 0.1) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ -0.1) - 1) / -0.1) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_cox)
msrp_mod_cox = lm((((MSRP ^ -0.1) - 1) / -0.1) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_log = lm(log(MSRP) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_log)
msrp_mod_cox = lm((((MSRP ^ -0.1) - 1) / -0.1) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_log = lm(log(MSRP) ~ .  - Popularity - Engine.Cylinders - highway.MPG - Engine.HP + log(Engine.HP), data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_log)
assumption_tester(msrp_mod_log)
assumption_tester(msrp_mod_cox)
assumption_tester = function(model) {
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
#normality test
print("Shapiro test:")
print(shapiro.test(model$residuals[2000:5000]))
hist(model$resid)
#multicollinearity
vif_vals = vif(model)
print("Max VIF Value:")
print(max(vif_vals))
print(vif_vals[vif_vals > 10])
#Constant Variance
plot_func(model)
print("Breusch-Pagan test:")
print(bptest(model))
print("Adjusted R-Squared:")
print(summary(model)$r.sq)
}
msrp_mod_cox = lm((((MSRP ^ -0.1) - 1) / -0.1) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_log = lm(log(MSRP) ~ .  - Popularity - Engine.Cylinders - highway.MPG - Engine.HP, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_log)
assumption_tester(msrp_mod_cox)
View(msrp_mod_no_cyl_highmpg)
assumption_tester = function(model) {
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
#normality test
print("Shapiro test:")
print(shapiro.test(resid(model)[1000:5000]))
hist(model$resid)
#multicollinearity
vif_vals = vif(model)
print("Max VIF Value:")
print(max(vif_vals))
print(vif_vals[vif_vals > 10])
#Constant Variance
plot_func(model)
print("Breusch-Pagan test:")
print(bptest(model))
print("Adjusted R-Squared:")
print(summary(model)$r.sq)
}
msrp_mod_cox = lm((((MSRP ^ -0.2) - 1) / -0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_log = lm(log(MSRP) ~ .  - Popularity - Engine.Cylinders - highway.MPG - Engine.HP, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_log)
assumption_tester(msrp_mod_cox)
assumption_tester(msrp_mod_cox)
assumption_tester(msrp_mod_log)
#install.packages("mltools")
#install.packages("caret")
#install.packages("dplyr")
#install.packages("ggplots2")
library(mltools)
library(data.table)
library(knitr)
library(dplyr)
library(ggplot2)
library(caret)
library(faraway)
library(lmtest)
library(MASS)
car_data = read.csv("Cars_data.csv")
car_data = subset(car_data, select = -c(Vehicle.Style, Market.Category))
car_data = na.omit(car_data)
#unique(car_data$Transmission.Type)
#colnames(car_data)
#unique(car_data$Engine.Fuel.Type)
#unique(car_data$Driven_Wheels)
#unique(car_data$Vehicle.Size)
#car_data$Make<-NULL
car_data$Model<- NULL
car_data_info = car_data
#head(car_data)
hist( car_data$MSRP, scien = FALSE, col = "lightblue")
car_data_priced<-car_data[!(car_data$MSRP>100000 | car_data$MSRP< 10000 ),]
range(car_data_priced$MSRP)
hist( car_data_priced$MSRP, scientific = FALSE, col = "lightpink")
car_data_transd<-car_data_priced[!(car_data_priced$Transmission.Type=="AUTOMATED_MANUAL" | car_data_priced$Transmission.Type=="DIRECT_DRIVE" | car_data_priced$Transmission.Type=="UNKNOWN"),]
unique(car_data_transd$Transmission.Type)
car_data_fuel<-car_data_transd[!(grepl("flex", car_data_transd$Engine.Fuel.Type, fixed = TRUE)
|car_data_transd$Engine.Fuel.Type=="electric" | car_data_transd$Engine.Fuel.Type=="" | car_data_transd$Engine.Fuel.Type=="natural gas"),]
unique(car_data_fuel$Engine.Fuel.Type)
car_data_fuel$Engine.Fuel.Type[car_data_fuel$Engine.Fuel.Type == "premium unleaded (required)" ] <- "gasoline"
car_data_fuel$Engine.Fuel.Type[car_data_fuel$Engine.Fuel.Type == "regular unleaded" ] <- "gasoline"
car_data_fuel$Engine.Fuel.Type[car_data_fuel$Engine.Fuel.Type == "premium unleaded (recommended)" ] <- "gasoline"
unique(car_data_fuel$Engine.Fuel.Type)
car_data_factored = car_data_fuel
car_data_factored$Vehicle.Size <- factor(car_data_factored$Vehicle.Size)
car_data_factored$Transmission.Type <- factor(car_data_factored$Transmission.Type)
car_data_factored$Engine.Fuel.Type <- factor(car_data_factored$Engine.Fuel.Type)
car_data_factored$Driven_Wheels <- factor(car_data_factored$Driven_Wheels)
car_data_factored$Engine.Cylinders <- factor(car_data_factored$Engine.Cylinders)
car_data_factored$Number.of.Doors <- factor(car_data_factored$Number.of.Doors)
car_data_factored$Make <- factor(car_data_factored$Make)
levels(car_data_factored$Vehicle.Size)
levels(car_data_factored$Transmission.Type)
levels(car_data_factored$Engine.Fuel.Type)
levels(car_data_factored$Driven_Wheels)
levels(car_data_factored$Engine.Cylinders)
levels(car_data_factored$Number.of.Doors)
levels(car_data_factored$Make)
#car_data_factored = one_hot(as.data.table(car_data_factored))
car_data_factored$ReleasedYearsAgo <- with(car_data_factored, 2020 - Year)
car_data_factored$Year <- NULL
set.seed(100)
#train-test  split using 65% of the data
samplesize = round(0.65*nrow(car_data_factored), 0)
index = sample(seq_len(nrow(car_data_factored)), size = samplesize)
data_train = car_data_factored[index,]
data_test = car_data_factored[-index,]
msrp_mod = lm(MSRP ~. - Popularity, data_train)
summary(msrp_mod)
msrp_mod2 = lm(MSRP ~ highway.MPG + Popularity, data_test)
#summary(msrp_mod2)
#anova(msrp_mod2, msrp_mod)
alias(msrp_mod)
plot_func = function(model, pointcol = "blue",linecol = "green") {
plot(fitted(model), resid(model), col = pointcol, pch = 20, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
assumption_tester = function(model) {
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
#normality test
print("Shapiro test:")
print(shapiro.test(resid(model)[0:5000]))
hist(model$resid)
#multicollinearity
vif_vals = vif(model)
print("Max VIF Value:")
print(max(vif_vals))
print(vif_vals[vif_vals > 10])
#Constant Variance
plot_func(model)
print("Breusch-Pagan test:")
print(bptest(model))
print("Adjusted R-Squared:")
print(summary(model)$r.sq)
}
assumption_tester(msrp_mod)
msrp_mod_no_cyl = lm(MSRP ~. - Popularity - Engine.Cylinders, data_train)
vif(msrp_mod_no_cyl)[vif(msrp_mod_no_cyl) > 10]
msrp_mod_no_cyl_highmpg = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data_train)
vif(msrp_mod_no_cyl_highmpg)[vif(msrp_mod_no_cyl_highmpg) > 5]
assumption_tester(msrp_mod_no_cyl_highmpg)
msrp_mod_no_cyl_highmpg_cd = cooks.distance(msrp_mod_no_cyl_highmpg)
msrp_mod_influential_fix = lm(MSRP ~. - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_influential_fix)
boxcox(msrp_mod_influential_fix, plotit = TRUE, lambda = seq(0.1, 0.3, by = 0.1))
msrp_mod_cox = lm((((MSRP ^ -0.2) - 1) / -0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_log = lm(log(MSRP) ~ .  - Popularity - Engine.Cylinders - highway.MPG - Engine.HP, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_log)
assumption_tester(msrp_mod_cox)
MSRP_big_mod = lm(
MSRP ~ . + I(Engine.HP ^ 2) + I(ReleasedYearsAgo ^ 2) + I(city.mpg ^ 2) + I(highway.MPG ^ 2)  + I(Popularity ^ 2),
data = data_train)
MSRP_mod_back_aic = step(MSRP_big_mod, direction = "backward", trace = 0)
summary(MSRP_mod_back_aic)
#assumption_tester(MSRP_big_mod)
#alias(MSRP_mod_back_aic)
#assumption_tester(MSRP_mod_back_aic)
car_removed_predictors = lm(log(MSRP) ~ Make + Engine.Fuel.Type + log(Engine.HP) +  Transmission.Type +
Driven_Wheels + Number.of.Doors +
I(ReleasedYearsAgo^2) + I(city.mpg^2) +
I(highway.MPG^2) , data = data_train)
assumption_tester(car_removed_predictors)
alias(car_removed_predictors)
#summary(car_removed_predictors)
#plot( MSRP~Engine.HP, data = car_data_factored, scientific = FALSE)
#hist( car_data_factored$MSRP, scientific = FALSE)
msrp_mod_cox = lm((((MSRP ^ -0.2) - 1) / -0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_log = lm(log(MSRP) ~ .  - Popularity - Engine.Cylinders - highway.MP, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_cox = lm((((MSRP ^ -0.2) - 1) / -0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_log = lm(log(MSRP) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_log)
msrp_mod_cox = lm((((MSRP ^ 0.2) - 1) / 0.2) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
msrp_mod_log = lm(log(MSRP) ~ .  - Popularity - Engine.Cylinders - highway.MPG, data = data_train,
subset = msrp_mod_no_cyl_highmpg_cd <= 4/length(msrp_mod_no_cyl_highmpg_cd))
assumption_tester(msrp_mod_log)
assumption_tester(msrp_mod_cox)
alias(car_removed_predictors)
summary(car_removed_predictors)
View(car_data_info)
View(car_data_info)
car_data = read.csv("Cars_data.csv")
car_data = subset(car_data, select = -c(Vehicle.Style, Market.Category))
car_data = na.omit(car_data)
#unique(car_data$Transmission.Type)
#colnames(car_data)
#unique(car_data$Engine.Fuel.Type)
#unique(car_data$Driven_Wheels)
#unique(car_data$Vehicle.Size)
#car_data$Make<-NULL
car_data$Model<- NULL
car_data_info = car_data
#head(car_data)
colnames(car_data_info)
car_data = read.csv("Cars_data.csv")
car_data = subset(car_data, select = -c(Vehicle.Style, Market.Category))
car_data = na.omit(car_data)
#unique(car_data$Transmission.Type)
#colnames(car_data)
#unique(car_data$Engine.Fuel.Type)
#unique(car_data$Driven_Wheels)
unique(car_data$Vehicle.Size)
#car_data$Make<-NULL
car_data$Model<- NULL
car_data_info = car_data
#head(car_data)
colnames(car_data_info)
